*  SqueakHOWTO ** Introduction#+BEGIN_EXAMPLE  This is catch-all help for odd-ball squeak HOWTO issues.#+END_EXAMPLE** Background image#+BEGIN_EXAMPLE    1. Tools -> FileList    2. Browse to the image file you want.    3. Open    4. Middle Click for handles    5. Bottom righ handle to resize full screen.    6. Top Red Menu drop down-> set as background    7. Middle click for handles    8. Top left X to close image    9. Your background should be set.#+END_EXAMPLE** Blocks Try Catch Finally ** Dynamic Retrieval of Class Method Categories and Methods#+BEGIN_EXAMPLEMotive: I wanted to autogenerate a bunch of boiler-plate tests for some given methods.This was the first step in getting the methods I wanted.(((WikitextParserFactory allMethodCategoriesIntegratedThrough:WikitextParserFactory) sorted)  "get all the categories" reject:[:r |                                                                                 "reject those I do not want"	|oc|	oc := OrderedCollection			with:#accessing			with: #'initialize-release'			with: #parsing			with: #'Templates Bogus'.	oc includes:r]) do:[:c | 	                    (WikitextParserFactory packageInfo methodsInCategory: c ofClass:WikitextParserFactory)   "get the method names"		do:[:m |Transcript show: c , ' -> ',  m methodSymbol; cr.]].                                         "display them"#+END_EXAMPLE** Dynamically Modify and Recompile methods in a Class#+BEGIN_EXAMPLEMotive: During a refactoring pass, I had about 1500 tests that where referencing an outdated class named 'PEGWikiMediaGeneratorTables'  and I needed them to all refer to a new class 'PEGWikiMediaGenerator'With a little bit of digging here is what I did to modify those test methods and recompile them.PEGParserWikimediaGeneratorTest selectors do:[:each| 	(PEGParserWikimediaGeneratorTest sourceCodeAt: each ) string includesSubstring:'PEGWikiMediaGeneratorTables'		ifTrue:[			PEGParserWikimediaGeneratorTest 				compile: ((PEGParserWikimediaGeneratorTest sourceCodeAt: each ) string copyReplaceAll:'PEGWikiMediaGeneratorTables' with:'PEGWikiMediaGenerator')]].worked like a charm.#+END_EXAMPLE** Expired SSL Cert Issue In Monticello#+BEGIN_EXAMPLE    Context: On October 1 2021 Monticello would not let me open the squeaksource.com  repository.  After much emailing at the board, it was determined that ...  1. squeaksource.com uses a funky certificate provider or something.  2. the problem was on my (a typical user) side of things.  3. this website gives us hoops to jump through:  https://www.openssl.org/blog/blog/2021/09/13/LetsEncryptRootCertExpire/  This fix worked for me:  su root  cd /etc/ssl/certs.  update-ca-certificate  mv DST_Root_CA_X3.pem  ~/   (or delete it)#+END_EXAMPLE** Clean Up Junk#+BEGIN_EXAMPLE    SystemNavigation obsoleteClasses    SystemNavigation obsoleteBehaviors    SystemNavigation obsoleteMethodReferences    Smalltalk garbageCollect    Smalltalk bytesLeft #+END_EXAMPLE** Compile Spur64 on Slackware Linux#+BEGIN_EXAMPLEgit clone http://github.com/OpenSmalltalk/vm oscogvmcd oscogvm/scripts/./scripts/updateSCCSVersionspushd building/linux64x64/squeak.cog.spur/build./mvmsudo make installpopdper email from MarcelHi Timothy --After your Git checkout, you must do this once./scripts/updateSCCSVersionsThen see how the CI does itscripts/ci/actions_prepare_linux_x86.shscripts/ci/actions_build.shAnd do it yourself:pushd building/linux64x64/squeak.cog.spur/build./mvmsudo make installpopdWell, you can also do this before building:pushd platforms/unix/configmake configurepopdBest,Marcel#+END_EXAMPLE** Close All Inspectors#+BEGIN_EXAMPLEWorld submorphs do: [ :e |      [ (e model isKindOf: Inspector) ifTrue: [ e delete ] ]         on: Error         do: [ ] ]World submorphs do: [ :e |      [ (e class name = #StickySketchMorph) ifTrue: [ e delete ] ]         on: Error         do: [ ] ]#+END_EXAMPLE** Custom Background Process#+BEGIN_EXAMPLESave the image every 15 minutes.Handy while running/developing memory intensive /large images.[[true] whileTrue: [ 900 seconds asDelay wait. Smalltalk snapshot: true andQuit: false.]] forkAt: Processor lowIOPriority named:'Dude'.#+END_EXAMPLE** Match Substrings In A Stream#+BEGIN_EXAMPLENon-Optimized example:|ios|ios := ReadStream on: 'Neque porro quisquam est qui dolorem ipsum quia dolor sit amet, consectetur, adipisci velit...|-'.{ '{|'  . '|-' . '|}' . '{{' . '}}' .  '[[' . ']]' . '__' . '==' . '::' . '**' . '##' . ''''  } anySatisfy: [:pattern | ios match: pattern. ios reset].#+END_EXAMPLE** RTPRIO warnings